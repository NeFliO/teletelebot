import json
import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram import Router

# === Load environment variables ===
TOKEN = os.getenv("TOKEN")
CHANNEL_VIP_MAIN = os.getenv("CHANNEL_VIP_MAIN")
CHANNEL_VIP_LITE = os.getenv("CHANNEL_VIP_LITE")

# === Validate environment variables ===
if not TOKEN:
    raise ValueError("TOKEN environment variable is missing!")
if not CHANNEL_VIP_MAIN or not CHANNEL_VIP_LITE:
    raise ValueError("CHANNEL_VIP_MAIN or CHANNEL_VIP_LITE environment variables are missing!")

CHANNEL_VIP_MAIN = int(CHANNEL_VIP_MAIN)
CHANNEL_VIP_LITE = int(CHANNEL_VIP_LITE)

# === Setup bot and dispatcher ===
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# === Load tariffs ===
try:
    with open("tariffs.json", "r", encoding="utf-8") as f:
        TARIFFS = json.load(f)
except FileNotFoundError:
    print("[ERROR] tariffs.json not found!")
    TARIFFS = []

# === Reply keyboard ===
reply_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üí≥ –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton(text="‚è≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")],
], resize_keyboard=True)

# === Command handlers ===
@router.message(CommandStart())
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=reply_kb)

    promo_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate_promo")]
    ])
    await message.answer("üéÅ <b>–ü–†–û–ú–û–ö–û–î –ù–ê 20% –°–ö–ò–î–ö–£ –ù–ê –í–°–ï –¢–ê–†–ò–§–´</b>", reply_markup=promo_kb)

@router.callback_query(F.data == "activate_promo")
async def handle_activate_promo(call: types.CallbackQuery):
    await call.message.edit_text("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Ñ–∏–∫—Ç–∏–≤–Ω–æ).")

@router.message(F.text == "üí≥ –¢–∞—Ä–∏—Ñ—ã")
async def tariffs_menu(message: types.Message):
    builder = InlineKeyboardBuilder()
    for t in TARIFFS:
        builder.button(text=t["name"], callback_data=f"tariff_{t['id']}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("tariff_"))
async def show_tariff(call: types.CallbackQuery):
    tariff_id = call.data.split("_")[1]
    tariff = next((t for t in TARIFFS if t["id"] == tariff_id), None)
    if not tariff:
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∞", callback_data=f"pay_{tariff_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_tariffs")]
    ])
    await call.message.edit_text(tariff["description"], reply_markup=markup)

@router.callback_query(F.data == "back_to_tariffs")
async def back_to_tariffs(call: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    for t in TARIFFS:
        builder.button(text=t["name"], callback_data=f"tariff_{t['id']}")
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("pay_"))
async def show_payment_options(call: types.CallbackQuery):
    tariff_id = call.data.split("_")[1]
    tariff = next((t for t in TARIFFS if t["id"] == tariff_id), None)
    if not tariff:
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–±–µ—Ä–±–∞–Ω–∫", callback_data=f"sber_{tariff_id}")],
        [InlineKeyboardButton(text="–°–ë–ü", callback_data=f"sbp_{tariff_id}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"tariff_{tariff_id}")]
    ])
    await call.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff['name']}:", reply_markup=markup)

@router.callback_query(F.data.startswith("sber_"))
async def pay_sber(call: types.CallbackQuery):
    tariff_id = call.data.split("_")[1]
    tariff = next((t for t in TARIFFS if t["id"] == tariff_id), None)
    if not tariff:
        return

    price = tariff["price"]
    text = (
        f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–±–µ—Ä–±–∞–Ω–∫</b>\n"
        f"–ö –æ–ø–ª–∞—Ç–µ: {price:.2f} üá∑üá∫RUB\n\n"
        f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∞—Ä–∏—Ñ–æ–º, –¥–∞–ª–µ–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Å —á–µ–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞.\n\n"
        f"<b>–°–±–µ—Ä–±–∞–Ω–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã:</b>\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ê–Ω–¥—Ä–µ–π –°.\n\n"
        f"<code>2202206392411927</code>\n"
        f"__________________________\n"
        f"–í—ã –ø–ª–∞—Ç–∏—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É –ª–∏—Ü—É.\n"
        f"–î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è."
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"pay_{tariff_id}")]
    ])
    await call.message.edit_text(text, reply_markup=markup)

@router.callback_query(F.data.startswith("sbp_"))
async def pay_sbp(call: types.CallbackQuery):
    tariff_id = call.data.split("_")[1]
    tariff = next((t for t in TARIFFS if t["id"] == tariff_id), None)
    if not tariff:
        return

    price = tariff["price"]
    text = (
        f"<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –°–ë–ü (–°–±–µ—Ä–±–∞–Ω–∫)</b>\n"
        f"–ö –æ–ø–ª–∞—Ç–µ: {price:.2f} üá∑üá∫RUB\n\n"
        f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∞—Ä–∏—Ñ–æ–º, –¥–∞–ª–µ–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Å —á–µ–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞.\n\n"
        f"<b>–°–ü–ë –ø–æ –Ω–æ–º–µ—Ä—É:</b>\n"
        f"<code>+79610605986</code> (–ê–Ω–¥—Ä–µ–π –°.)\n"
        f"__________________________\n"
        f"–í—ã –ø–ª–∞—Ç–∏—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º—É –ª–∏—Ü—É.\n"
        f"–î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ —Å—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è."
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"pay_{tariff_id}")]
    ])
    await call.message.edit_text(text, reply_markup=markup)

@router.message(F.text == "‚è≥ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞")
async def my_subscription(message: types.Message):
    await message.answer("–ü–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–±—Ä–∞–Ω–∞).", reply_markup=reply_kb)

# === Main runner ===
async def main():
    print("[BOOT] Starting bot...")
    dp.include_router(router)
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"[FATAL] Polling failed: {e}")

if __name__ == "__main__":
    asyncio.run(main())
